LEGENDAS:
-- Ignore essas linhas para o relatório
/// Problemas ou resoluções 


11/5
Iniciando o projeto, a primeira coisa foi seguir um dos objetivos propostos do projeto:
	Aprender como as shells criam novos processos filhos e conectam a entrada/saída (I/O) ao terminal.
Pesquisei um pouco sobre fork() e pipe(), funções que acredito que farão o que foi dito acima, mas durante essa pesquisa, encontrei um problema:
	Não entendia o funcionamento da PATH, variáveis de ambiente do Linux que direcionam os caminhos (paths) onde serão encontrados os comandos que existem no shell.

Acredito que vai ser melhor discutir sobre isso com meus colegas, pois a parte da implementação da execução de comandos ficou com eles.
Portanto hoje fiz a base do processo pai, que usa uma thread para ler o que o usuário está pedindo como comando e a thread principal para direcionar o funcionamento a partir do comando.


/// PROBLEMA
Quando o usuário rodava o comando 'exit', o sistema não fechava pois a thread de leitura estava de novo no começo do loop de aguardar input do usuário e a thread principal estava esperando a thread de leitura.

/// RESOLUÇÃO
Foi adicionado, quando houver a saída do sistema, um cancelamento da thread de leitura, assim garantindo que a shell fecha no momento que o usuário roda 'exit'


18/5
Depois de uma discussão com meus colegas que estão codando no projeto, decidimos por ter as variáveis de ambiente no arquivo shell, se qualquer comando precisar, passaremos para esse comando por pipe.

/// PROBLEMA
Eu nunca tinha feito pipes que passavam de um processo executando cum arquivo para outro processo executando outro arquivo, já que os pipes definidos no primeiro arquivo seriam perdidos ao rodar a função "execv".

/// RESOLUÇÃO
Tem como direcionar as saidas e entradas dos pipes para o STDIN e STDOUT do programa sendo executado pelo processo filho, assim, para eles, fgets/scanf e printf, mas os valores dessas funções vai para ou vem dos pipes.


22/5

-- pode ignorar boa parte do que falei hoje, vá para a interrupção abaixo

--O próximo passo é sair de uma shell equipada para lidar apenas caso a caso (estávamos verificando o comando pedido e abrindo o arquivo conectado àquele comando) e
--expandir para algo mais automático e escalonável(consegue rodar novos arquivos que se apropriam ao padrão, desde que estejam em uma pasta no PATH).

--rota:
--[conferir comunicação pai-filho] -> [criar sistema de flags para pedir variaveis de ambiente e utilizar resultados(variáveis ou terminal)] -> [verificar se comando 
--pedido existe nas pastas PATH] -> [se existir, o comando deve acessar o executavel de mesmo nome]

--- primeiro ato: [conferir comunicação pai-filho]
--/// PROBLEMA
--Quando passadas mais de uma informação para o filho, a segunda em diante não aparecia

--/// RESOLUÇÃO
--Como estamos usando fgets, o valor lido por buffer ignorava o último byte, que passava adiante e corrompia a informação do próximo elemento.
--Foi então instaurado que o tamanho do buffer da shell deve ser 255 e o tamanho do buffer dos comandos deve ser 256, para garantir os valores

--- segundo ato: [criar sistema de flags para pedir variaveis de ambiente e utilizar resultados(variáveis ou terminal)]

//// INTERRUPÇÃO
Algumas das coisas que assumimos para o projeto estavam erradas.
Comandos que modificam as variáveis de ambiente (cd e path) devem ser feitos built-in(sem arquivo próprio, rodam no shell.c), isso também permite uma maior liberdade de conexão com o terminal para os comandos, que será util na hora de redirecionar futuramente com '|' e '>'


28/05-30/05

Após reestruturação do funcionamento, consegui fazer algumas coisas nesses dias:

/// PROBLEMA
Como separar os processos e interpretar as informações de '&' (apenas outro processo), '|' (o processo à direita recebe como entrada padrão a saída padrão do processo à esquerda) e '>' (direciona a saída padrão do processo à esquerda no arquivo à direita)

/// RESOLUÇÃO
- A ideia foi determinar a estrutura para guardar informações dos processos:

    STRUCT proc_info
	STRING	      command
	INT	      argc (argc nesse caso não conta o comando, diferentemente do argc normal)
	ARRAY<STRING> args
	STRING	      outputFilePath
	INT	      flags

    EXPLICAÇÃO FLAGS
    3 BITS

      > 0b100 significa OUTPUT EM PIPE PARA ARQUIVO         "comm_alvo arg1 arg2 > arquivo.extensao"

      > 0b010 significa INPUT EM PIPE DE OUTRO PROCESSO     "outro_comm arg1 | comm_alvo arg1 arg2"

      > 0b001 significa OUTPUT EM PIPE PARA OUTRO PROCESSO  "comm_alvo arg1 arg2 | outro_comm arg1"

      > Possiveis interacoes
        000 - NORMAL
        001 - OUT PROC
        010 - IN  PROC
        011 - IN  PROC, OUT PROC
        100 - OUT ARQV
        110 - IN  PROC, OUT ARQV
	101 e 111 são impossíveis, não dá pra escrever a saída em um arquivo e enviar esses resultados para outro processo ao mesmo tempo

- Múltiplos processos numa mesma linha, com direcionamento de IN/OUT por pipes
-- pode testar essas linhas no shell para entender se quiser, vitor
Exemplo geral:    [comm1 arg1 arg2 | comm2 arg3 & comm3 arg4 arg5 arg6 > file.extension]
Exemplo no shell: [sum 4 5 6 | pretty > resultado.txt & sum 23 32]

A função "getProcesses" recebe a linha inteira e conta quantos preocessos tem nela (1 + num. de '&' e '|')
Após isso, ela separa cada processo e armazena as informações.


	Ex.: [comm1 arg1 arg2 | comm2 arg3 & comm3 arg4 arg5 arg6 > file.extension]
	    processo 1:
		command = comm1
		argc = 2
		args = [0] = arg1,
		       [1] = arg2
		outputFilePath = NULL
		flags = 0b001

	    processo 2:
		command = comm2
		argc = 1
		args = [0] = arg3
		outputFilePath = NULL
		flags = 0b010

	    processo 3:
		command = comm3
		argc = 2
		args = [0] = arg4,
		       [1] = arg5,
		       [2] = arg6
		outputFilePath = "file.extension"
		flags = 0b100


No final dessa iteração do loop, as informações na lista de processos são liberadas.

Depois é criado um loop que cria e roda cada um dos elementos adquiridos acima em um novo fork.

- Múltiplos paths

A ideia foi parecida com a partição acima de processos.
Exemplo de PATH: "PATH=/home/fael/shared/projeto_SO/bin/comm:/home/fael/shared/projeto_SO/bin/extras"

    path1 :
	"/home/fael/shared/projeto_SO/bin/comm"
    path 2:
	"/home/fael/shared/projeto_SO/bin/extras"

Ao tentar rodar um comando que não seja built-in (path, cd, exit, script), o programa procura nas pastas acima os arquivos executáveis cujo nome seja igual ao comando executado.

- Lendo de arquivo batch
Além de aceitar comandos do terminal, é possível rodar "script /path/to/script" para ter uma sequência de comandos a serem executados, estes escritos em um arquivo.

/// PROBLEMA
Como incorporar os vários arquivos (de quantidade indefinida) no loop de comandos

/// RESOLUÇÃO 
Há duas partes que incorporam o comando 'script' no código, a primeira é a que percebe que o comando script foi selecionado, pega o processo[n].args[1], interpreta como arquivo (pode ser relativo a partir do CWD), abre este arquivo, ativa uma flag "readScript" e parte para a próxima iteração do loop.
A segunda parte lê os comandos a partir do arquivo em vez de ler do terminal (só é ativado quando readScript==1) e o resto do código trata as informações de processo de forma igual a se fossem comandos vindos do terminal. Quando recebe um EOF (end of file), o código fecha o arquivo e passa a ler do terminal de novo.